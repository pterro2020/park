name: Secure Pipeline

on:
  push:
    branches:
      - main

jobs:
  #######################################
  # SAST: Статический анализ кода
  #######################################
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install tools
        run: |
          pip install bandit
          npm install -g eslint@latest stylelint@latest htmlhint@latest

      - name: Configure ESLint
        run: |
          echo '{
            "type": "module",
            "rules": {
              "no-console": "warn",
              "no-debugger": "error"
            }
          }' > .eslintrc.json

      - name: Configure Stylelint
        run: |
          echo '{
            "extends": "stylelint-config-standard"
          }' > .stylelintrc.json

      - name: Configure HTMLHint
        run: |
          echo '{
            "tagname-lowercase": true,
            "attr-lowercase": true
          }' > .htmlhintrc

      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f html -o bandit-report.html || true

      - name: Run ESLint (JavaScript)
        run: |
          eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true

      - name: Run Stylelint (CSS)
        run: |
          stylelint "**/*.{css,scss}" --formatter json --output-file stylelint-report.json || true

      - name: Run HTMLHint (HTML)
        run: |
          htmlhint "**/*.html" --format json --output htmlhint-report.json || true

      - name: Generate SAST Report
        run: |
          echo "# SAST Scan Results" > sast-report.md
          # Python
          echo "## Python (Bandit)" >> sast-report.md
          if [ -f bandit-report.json ]; then
            jq -r '.results[] | "### \(.test_id)\n- Severity: \(.issue_severity)\n- Line: \(.line_number)\n- File: \(.filename)\n- Issue: \(.issue_text)\n"' bandit-report.json >> sast-report.md || true
          else
            echo "No Python issues found." >> sast-report.md
          fi
          # JavaScript
          echo "## JavaScript (ESLint)" >> sast-report.md
          if [ -f eslint-report.json ]; then
            jq -r '.[] | "### \(.ruleId)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.filePath)\n- Message: \(.message)\n"' eslint-report.json >> sast-report.md || true
          else
            echo "No JavaScript issues found." >> sast-report.md
          fi
          # CSS
          echo "## CSS (Stylelint)" >> sast-report.md
          if [ -f stylelint-report.json ]; then
            jq -r '.[] | "### \(.rule)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.source)\n- Message: \(.text)\n"' stylelint-report.json >> sast-report.md || true
          else
            echo "No CSS issues found." >> sast-report.md
          fi
          # HTML
          echo "## HTML (HTMLHint)" >> sast-report.md
          if [ -f htmlhint-report.json ]; then
            jq -r '.[] | "### \(.rule.id)\n- Severity: \(.rule.severity)\n- Line: \(.line)\n- File: \(.file)\n- Message: \(.message)\n"' htmlhint-report.json >> sast-report.md || true
          else
            echo "No HTML issues found." >> sast-report.md
          fi

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.*  # Все файлы Bandit
            eslint-report.*  # Все файлы ESLint
            stylelint-report.*  # Все файлы Stylelint
            htmlhint-report.*  # Все файлы HTMLHint
            sast-report.md  # Итоговый отчёт

  #######################################
  # REPORT: Итоговая публикация
  #######################################
  report:
    runs-on: ubuntu-latest
    needs: [sast-scan]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # Все артефакты сохраняются в папку artifacts

      - name: Debug Artifacts
        run: |
          ls -R artifacts  # Проверка структуры файлов
          cat artifacts/sast-reports/bandit-report.json  # Проверка содержимого

      - name: Create Security Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const sast = fs.readFileSync('artifacts/sast-reports/sast-report.md').toString().slice(0, 10000);
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Security Report",
              body: `# SAST Results\n\n${sast}\n\n[Full reports](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts)`,
              labels: ["security"],
              assignees: [context.actor]
            });
