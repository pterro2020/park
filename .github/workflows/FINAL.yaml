name: Secure Pipeline

on:
  push:
    branches:
      - main

jobs:
  #######################################
  # BUILD: Установка зависимостей
  #######################################
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install system tools
        run: |
          sudo apt-get install -y jq  # Для обработки JSON
          pip install pip-tools  # Для управления зависимостями

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install bandit

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Node.js tools
        run: |
          npm install -g eslint@latest eslint-html-reporter@latest stylelint@latest stylelint-config-standard htmlhint@latest

  #######################################
  # SAST: Статический анализ кода
  #######################################
  sast-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure ESLint
        run: |
          echo '{
            "type": "module",
            "rules": {
              "no-console": "warn",
              "no-debugger": "error"
            }
          }' > .eslintrc.json

      - name: Configure Stylelint
        run: |
          echo '{
            "extends": "stylelint-config-standard"
          }' > .stylelintrc.json

      - name: Configure HTMLHint
        run: |
          echo '{
            "tagname-lowercase": true,
            "attr-lowercase": true
          }' > .htmlhintrc

      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f html -o bandit-report.html || true

      - name: Run ESLint (JavaScript)
        run: |
          eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true
          eslint-html-reporter -i eslint-report.json -o eslint-report.html || true

      - name: Run Stylelint (CSS)
        run: |
          stylelint "**/*.{css,scss}" --formatter json --output-file stylelint-report.json || true
          stylelint "**/*.{css,scss}" --formatter html --output-file stylelint-report.html || true

      - name: Run HTMLHint (HTML)
        run: |
          htmlhint "**/*.html" --format json --output htmlhint-report.json || true
          htmlhint "**/*.html" --format html --output htmlhint-report.html || true

      - name: Generate SAST Report
        run: |
          echo "# SAST Scan Results" > sast-report.md
          # Python
          echo "## Python (Bandit)" >> sast-report.md
          if [ -f bandit-report.json ]; then
            jq -r '.results[] | "### \(.test_id)\n- Severity: \(.issue_severity)\n- Line: \(.line_number)\n- File: \(.filename)\n- Issue: \(.issue_text)\n"' bandit-report.json >> sast-report.md || true
          else
            echo "No Python issues found." >> sast-report.md
          fi
          # JavaScript
          echo "## JavaScript (ESLint)" >> sast-report.md
          if [ -f eslint-report.json ]; then
            jq -r '.[] | "### \(.ruleId)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.filePath)\n- Message: \(.message)\n"' eslint-report.json >> sast-report.md || true
          else
            echo "No JavaScript issues found." >> sast-report.md
          fi
          # CSS
          echo "## CSS (Stylelint)" >> sast-report.md
          if [ -f stylelint-report.json ]; then
            jq -r '.[] | "### \(.rule)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.source)\n- Message: \(.text)\n"' stylelint-report.json >> sast-report.md || true
          else
            echo "No CSS issues found." >> sast-report.md
          fi
          # HTML
          echo "## HTML (HTMLHint)" >> sast-report.md
          if [ -f htmlhint-report.json ]; then
            jq -r '.[] | "### \(.rule.id)\n- Severity: \(.rule.severity)\n- Line: \(.line)\n- File: \(.file)\n- Message: \(.message)\n"' htmlhint-report.json >> sast-report.md || true
          else
            echo "No HTML issues found." >> sast-report.md
          fi

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.*
            eslint-report.*
            stylelint-report.*
            htmlhint-report.*
            sast-report.md

  #######################################
  # DAST: Динамическое сканирование
  #######################################
  dast-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install uwsgi

      - name: Start Django
        run: |
          nohup uwsgi --http 0.0.0.0:8000 --module parking.wsgi --workers 2 --threads 1 > django.log 2>&1 &
          echo "Waiting for server..."
          until curl -s http://localhost:8000/myparking/; do
            sleep 10
          done

      - name: Run OWASP ZAP
        run: |
          docker run --network host --rm -v $(pwd):/zap/wrk/:rw,z -t --user root ghcr.io/zaproxy/zaproxy:latest \
            zap-full-scan.py \
            -t http://localhost:8000/myparking/ \
            -r zap_report.html \
            -J zap_report.json \
            -w zap_report.md \
            -z "-config scanner.threadPerHost=1" \
            -I || echo "ZAP scan completed with warnings."

      - name: Generate DAST Report
        run: |
          echo "# DAST Scan Results" > dast-report.md
          if [ -f zap_report.json ]; then
            jq -r '.alerts[] | "### \(.alert)\n- Risk: \(.riskdesc)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n"' zap_report.json >> dast-report.md || true
          else
            echo "No DAST issues found." >> dast-report.md
          fi

      - name: Upload DAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            zap_report.*
            dast-report.md
            django.log

  #######################################
  # SECURITY CHECKS: Проверка конфигураций
  #######################################
  security-checks:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dockerfile Linting
        if: hashFiles('Dockerfile') != ''
        run: |
          docker run --rm -v $(pwd):/app hadolint/hadolint hadolint Dockerfile > hadolint-report.txt || true

      - name: Docker Compose Validation
        if: hashFiles('docker-compose.yml') != ''
        run: |
          docker-compose -f docker-compose.yml config > /dev/null || true
          echo "Docker Compose valid." > docker-compose-report.txt

      - name: Django Security Checks
        run: |
          python manage.py check --deploy 2>&1 | tee django-security.txt || true

      - name: Generate Security Report
        run: |
          echo "# Security Configuration Checks" > security-config-report.md
          # Docker
          echo "## Docker" >> security-config-report.md
          cat hadolint-report.txt >> security-config-report.md || echo "No Dockerfile found." >> security-config-report.md
          cat docker-compose-report.txt >> security-config-report.md || echo "No docker-compose.yml found." >> security-config-report.md
          # Django
          echo "## Django" >> security-config-report.md
          cat django-security.txt >> security-config-report.md || echo "No Django issues found." >> security-config-report.md

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-config-reports
          path: |
            hadolint-report.txt
            docker-compose-report.txt
            django-security.txt
            security-config-report.md

#####################################################
# security-gateway # Проверка на уязвимости "CRITICAL"
#####################################################
  security-gateway:
    runs-on: ubuntu-latest
    needs: [sast-scan, dast-scan]
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Check SAST Critical Issues
        id: sast-check
        run: |
          if [ -f artifacts/sast-reports/bandit-report.json ]; then
            HIGH_ISSUES=$(jq -r '[.results[] | select(.issue_severity == "HIGH")] | length' artifacts/sast-reports/bandit-report.json)
          else
            HIGH_ISSUES=0
          fi
          echo "high_issues=$HIGH_ISSUES" >> $GITHUB_ENV

      - name: Check DAST Critical Issues
        id: dast-check
        run: |
          if [ -f artifacts/dast-reports/zap_report.json ]; then
            HIGH_ALERTS=$(jq -r '[.alerts[] | select(.riskdesc | contains("High") or contains("Critical"))] | length' artifacts/dast-reports/zap_report.json)
          else
            HIGH_ALERTS=0
          fi
          echo "high_alerts=$HIGH_ALERTS" >> $GITHUB_ENV

      - name: Fail on Critical Vulnerabilities
        if: env.high_issues > 0 || env.high_alerts > 0
        run: |
          echo "Обнаружены критические уязвимости. Релиз заблокирован."
          exit 1

  #######################################
  # REPORT: Итоговая публикация результатов
  #######################################
  report:
    runs-on: ubuntu-latest
    needs: [sast-scan, dast-scan, security-checks]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug Artifacts
        run: |
          ls -R artifacts  # Проверка структуры файлов
          echo "SAST Report exists? $(ls artifacts/sast-reports/sast-report.md 2>/dev/null || echo 'No')"
          echo "DAST Report exists? $(ls artifacts/dast-reports/dast-report.md 2>/dev/null || echo 'No')"
          echo "Security Config Report exists? $(ls artifacts/security-config-reports/security-config-report.md 2>/dev/null || echo 'No')"

      - name: Create GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Ограничиваем каждый раздел до 10KB (65KB total)
            const sastPath = path.join('artifacts', 'sast-reports', 'sast-report.md');
            const dastPath = path.join('artifacts', 'dast-reports', 'dast-report.md');
            const securityPath = path.join('artifacts', 'security-config-reports', 'security-config-report.md');

            const sast = fs.existsSync(sastPath) ? fs.readFileSync(sastPath).toString().slice(0, 10000) : 'No SAST report found.';
            const dast = fs.existsSync(dastPath) ? fs.readFileSync(dastPath).toString().slice(0, 10000) : 'No DAST report found.';
            const security = fs.existsSync(securityPath) ? fs.readFileSync(securityPath).toString().slice(0, 10000) : 'No Security report found.';

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Security Scan Summary",
              body: `# Security Report\n\n## SAST\n${sast}\n\n## DAST\n${dast}\n\n## Config Checks\n${security}\n\n[Full reports](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts)`,
              labels: ["security"],
              assignees: [context.actor]
            });
