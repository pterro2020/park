name: SSSD

on:
  push:
    branches:
      - main

jobs:
  dast-scan:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка Python и зависимостей
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Настройка прав доступа для рабочей директории
      - name: Set permissions for working directory
        run: |
          sudo chmod -R 777 $(pwd)
          sudo chown -R 1000:1000 $(pwd)

      # Запуск Django-сервера (слушает все интерфейсы)
      - name: Start Django application with uWSGI
        run: |
          pip install uwsgi
          nohup uwsgi --http 0.0.0.0:8000 --module parking.wsgi > django.log 2>&1 &
          echo "Waiting for Django application to start..."
          sleep 30
          echo "Django application started on http://0.0.0.0:8000"

      # Проверка доступности Django
      - name: Check Django server availability
        run: |
          timeout=120
          while [ $timeout -gt 0 ]; do
            curl -sL http://localhost:8000/myparking/ | grep -q '<!DOCTYPE html>' && break
            echo "Waiting for Django server... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout - 5))
          done
          if [ $timeout -le 0 ]; then
            echo "Django server failed to start. Continuing anyway..."
          fi

      # Показать логи Django (всегда)
      - name: Show Django logs
        run: cat django.log || echo "Django logs not found"

      # Создание файла исключений
#      - name: Create zap-baseline.ignore file
#        run: |
#          echo "10010  # Cookie No HttpOnly Flag" > zap-baseline.ignore
#          echo "10017  # Cross-Domain JavaScript Source File Inclusion" >> zap-baseline.ignore
#          echo "10038  # Content Security Policy (CSP) Header Not Set" >> zap-baseline.ignore
#          echo "10063  # Permissions Policy Header Not Set" >> zap-baseline.ignore
#          echo "90003  # Sub Resource Integrity Attribute Missing" >> zap-baseline.ignore
#          echo "90004  # Insufficient Site Isolation Against Spectre Vulnerability" >> zap-baseline.ignore
#          echo "10112  # Session Management Response Identified" >> zap-baseline.ignore
#          echo "10111  # Authentication Request Identified" >> zap-baseline.ignore
#          echo "10031  # User Controllable HTML Element Attribute (Potential XSS)" >> zap-baseline.ignore
#          echo "10036  # Server Leaks Version Information via 'Server' Header" >> zap-baseline.ignore
#          echo "10049  # Storable and Cacheable Content" >> zap-baseline.ignore

      # Запуск OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --network host --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:latest \
            zap-baseline.py \
            -t http://localhost:8000/myparking/ \
            -J zap_report.json \
            -w zap_report.md \
            -g gen_file \
            -I \  # Игнорируем все предупреждения
            -T 900000 \  # Таймаут ответа: 15 минут
            -x zap.xml || true

      # Генерация отчёта
      - name: Generate Markdown Report
        run: |
          # Если JSON-отчёт не существует — используем XML
          if [ ! -f zap_report.json ] || ! jq empty zap_report.json >/dev/null 2>&1; then
            echo "# ZAP Scan Report" > zap_report.md
            echo "JSON report is invalid. Generating report from XML:" >> zap_report.md
            echo "```xml" >> zap_report.md
            cat zap.xml >> zap_report.md
            echo "```" >> zap_report.md
          else
            echo "# ZAP Scan Results" > zap_report.md
            echo "" >> zap_report.md

            # Обработка всех категорий алертов
            echo "## All Alerts (Critical/High/Medium)" >> zap_report.md
            jq -r '.alerts[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            echo "## Warnings (Medium/Low)" >> zap_report.md
            jq -r '.warnings[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            echo "## Informational Messages" >> zap_report.md
            jq -r '.informational[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            # Если алерты не найдены — добавляем сообщение
            if ! grep -q "###" zap_report.md; then
              echo "No critical/high/medium alerts found." >> zap_report.md
            fi
          fi

          # Выводим отчёт в логи
          cat zap_report.md

      # Публикация отчёта
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.md

      # Очистка процессов
      - name: Cleanup processes
        run: |
          pkill -f uwsgi || true
