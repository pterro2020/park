name: SSSD

on:
  push:
    branches:
      - main

jobs:
  dast-scan:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка Docker
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker
          sudo chmod 666 /var/run/docker.sock

      # Проверка установки Docker
      - name: Verify Docker installation
        run: |
          docker --version
          docker ps

      # Установка docker-compose
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Сборка и запуск Docker-контейнеров
      - name: Build and start Docker containers
        run: |
          docker-compose up -d
          echo "Waiting for Docker containers to start..."
          sleep 20
          echo "Docker containers started."

      # Проверка доступности Django-сервера через nginx
      - name: Check if Django server is running
        run: |
          timeout=120
          while [ $timeout -gt 0 ]; do
            curl -sL http://127.0.0.1/myparking/ | grep -q '<!DOCTYPE html>' && break
            echo "Waiting for Django server to become available... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout - 5))
          done
          if [ $timeout -le 0 ]; then
            echo "Django server failed to start within the timeout period."
            exit 1
          fi
          echo "Django server is running."

      # Показать логи Django (в случае ошибки)
      - name: Show Django logs
        if: failure()
        run: |
          docker-compose logs django

      # Создание файла исключений zap-baseline.ignore
      - name: Create zap-baseline.ignore file
        run: |
          echo "10017  # Cross-Domain JavaScript Source File Inclusion" > zap-baseline.ignore
          echo "90003  # Sub Resource Integrity Attribute Missing" >> zap-baseline.ignore
          echo "90004  # Insufficient Site Isolation Against Spectre Vulnerability" >> zap-baseline.ignore
          echo "10010  # Cookie No HttpOnly Flag" >> zap-baseline.ignore
          echo "10038  # Content Security Policy (CSP) Header Not Set" >> zap-baseline.ignore
          echo "10063  # Permissions Policy Header Not Set" >> zap-baseline.ignore

      # Запуск OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --network host --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://127.0.0.1/myparking/ \
            -r zap_report.json \
            -g zap_config.zap \
            -l IGNORE \
            -i zap-baseline.ignore \
            -x zap.xml || true

      # Преобразование JSON-отчета ZAP в Markdown
      - name: Convert JSON report to Markdown
        run: |
          if [ ! -f zap_report.json ]; then
            echo "File zap_report.json not found. Exiting without generating Markdown report."
            exit 0
          fi
          echo "# ZAP Scan Results" > zap_report.md
          echo "" >> zap_report.md
          jq -r '.alerts[] | "## Alert: \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.otherinfo)\n- Solution: \(.solution)\n\n"' zap_report.json >> zap_report.md
          cat zap_report.md

      # Публикация отчета
      - name: Upload ZAP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.md

      # Остановка Docker-контейнеров
      - name: Stop Docker containers
        run: |
          docker-compose down
