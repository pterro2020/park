name: SAST and DAST

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start local Django server in background
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Install Bandit for Python SAST
        run: |
          pip install bandit

      - name: Run Bandit (Python) for SAST
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Generate SAST Report in Markdown
        run: |
          echo "# SAST Scan Results (Critical Issues)" > sast-report.md
          echo "" >> sast-report.md
          echo "Below are the critical issues found during the SAST scan:" >> sast-report.md
          echo "" >> sast-report.md
          jq -r '.[] | "## Issue: \(.test_id) - \(.issue_text)\n\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Filename: \(.filename)\n- Line: \(.line_number)\n\n"' critical-bandit-report.json >> sast-report.md

      - name: Upload SAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            critical-bandit-report.json
            sast-report.md

      - name: Create SAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "SAST Scan Results (Critical Issues)";
            const issueBody = `
              Below are the critical issues found during the SAST scan:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('sast-report.md').toString())
              \`\`\`
            `;
            const labels = ["sast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });


  dast-scan:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка Python и зависимостей
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Подготовка отчёта
      - name: Prepare report file
        run: |
          touch report_md.md
          chmod 666 report_md.md

      # Запуск Django-сервера
      - name: Start Django application with uWSGI
        run: |
          pip install uwsgi
          nohup uwsgi --http 0.0.0.0:8000 --module parking.wsgi --workers 2 --threads 1 > django.log 2>&1 &
          echo "Waiting for Django application to start..."
          until curl -s http://localhost:8000/myparking/ > /dev/null; do
            echo "Still waiting..."
            sleep 10
          done
          echo "Django is running."

      # Запуск OWASP ZAP
      - name: Run OWASP ZAP Full Scan
        run: |
          docker run --network host --rm -v $(pwd):/zap/wrk/:rw,z -t --user root ghcr.io/zaproxy/zaproxy:latest \
            zap-full-scan.py \
            -t http://localhost:8000/myparking/ \
            -r zap_report.html \
            -J zap_report.json \
            -w report_md.md \
            -z "-config scanner.threadPerHost=1" \
            -I \  # Корректный флаг для игнорирования предупреждений
            -I || echo "ZAP scan completed with warnings."

      # Генерация отчёта
      - name: Generate Markdown Report
        run: |
          if [ ! -f zap_report.json ]; then
            echo "# ZAP Scan Report" > report_md.md
            echo "No JSON report was generated by ZAP." >> report_md.md
          else
            echo "# ZAP Scan Results" > report_md.md
            jq -r '.alerts[] | "### \(.alert)\n- Risk: \(.riskdesc)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n"' zap_report.json >> report_md.md || true
            jq -r '.warnings[] | "### \(.alert)\n- Risk: \(.riskdesc)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n"' zap_report.json >> report_md.md || true
          fi
          cat report_md.md

      # Публикация отчёта
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_md.md
            zap_report.html
            zap_report.json

      # Очистка
      - name: Cleanup processes
        run: |
          pkill -f uwsgi || true
