name: SAST and DAST Scan with Deployment for Django Project

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start local Django server in background
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Install Bandit for Python SAST
        run: |
          pip install bandit

      - name: Run Bandit (Python) for SAST
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Generate SAST Report in Markdown
        run: |
          echo "# SAST Scan Results (Critical Issues)" > sast-report.md
          echo "" >> sast-report.md
          echo "Below are the critical issues found during the SAST scan:" >> sast-report.md
          echo "" >> sast-report.md
          jq -r '.[] | "## Issue: \(.test_id) - \(.issue_text)\n\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Filename: \(.filename)\n- Line: \(.line_number)\n\n"' critical-bandit-report.json >> sast-report.md

      - name: Upload SAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            critical-bandit-report.json
            sast-report.md

      - name: Create SAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "SAST Scan Results (Critical Issues)";
            const issueBody = `
              Below are the critical issues found during the SAST scan:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('sast-report.md').toString())
              \`\`\`
            `;
            const labels = ["sast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

  dast-scan:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка Python и зависимостей
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Настройка прав доступа для рабочей директории
      - name: Set permissions for working directory
        run: |
          sudo chmod -R 777 $(pwd)
          sudo chown -R 1000:1000 $(pwd)

      # Запуск Django-сервера (слушает все интерфейсы)
      - name: Start Django application with uWSGI
        run: |
          pip install uwsgi
          nohup uwsgi --http 0.0.0.0:8000 --module parking.wsgi > django.log 2>&1 &
          echo "Waiting for Django application to start..."
          sleep 30
          echo "Django application started on http://0.0.0.0:8000"

      # Запуск OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --network host --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:latest \
            zap-baseline.py \
            -t http://localhost:8000/myparking/ \
            -J zap_report.json \
            -g gen_file \
            -I \  # Игнорируем все предупреждения


      # Генерация отчёта
      - name: Generate Markdown Report
        run: |
          # Если JSON-отчёт не существует — используем XML
          if [ ! -f zap_report.json ] || ! jq empty zap_report.json >/dev/null 2>&1; then
            echo "# ZAP Scan Report" > zap_report.md
            echo "JSON report is invalid. Generating report from XML:" >> zap_report.md
            echo "```xml" >> zap_report.md
            cat zap.xml >> zap_report.md
            echo "```" >> zap_report.md
          else
            echo "# ZAP Scan Results" > zap_report.md
            echo "" >> zap_report.md

            # Обработка всех категорий алертов
            echo "## All Alerts (Critical/High/Medium)" >> zap_report.md
            jq -r '.alerts[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            echo "## Warnings (Medium/Low)" >> zap_report.md
            jq -r '.warnings[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            echo "## Informational Messages" >> zap_report.md
            jq -r '.informational[] | "### \(.alert)\n\n- Risk: \(.riskdesc)\n- Confidence: \(.confidence)\n- URL: \(.url)\n- Description: \(.desc)\n- Solution: \(.solution)\n\n"' \
              zap_report.json >> zap_report.md || true

            # Если алерты не найдены — добавляем сообщение
            if ! grep -q "###" zap_report.md; then
              echo "No critical/high/medium alerts found." >> zap_report.md
            fi
          fi

          # Выводим отчёт в логи
          cat zap_report.md

      # Публикация отчёта
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.md

      # Очистка процессов
      - name: Cleanup processes
        run: |
          pkill -f uwsgi || true
