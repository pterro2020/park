name: SAST and DAST Scan with Deployment for Django Project

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start local Django server in background
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Install Bandit for Python SAST
        run: |
          pip install bandit

      - name: Run Bandit (Python) for SAST
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Generate SAST Report in Markdown
        run: |
          echo "# SAST Scan Results (Critical Issues)" > sast-report.md
          echo "" >> sast-report.md
          echo "Below are the critical issues found during the SAST scan:" >> sast-report.md
          echo "" >> sast-report.md
          jq -r '.[] | "## Issue: \(.test_id) - \(.issue_text)\n\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Filename: \(.filename)\n- Line: \(.line_number)\n\n"' critical-bandit-report.json >> sast-report.md

      - name: Upload SAST reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            critical-bandit-report.json
            sast-report.md

      - name: Create SAST Issue with Markdown report
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "SAST Scan Results (Critical Issues)";
            const issueBody = `
              Below are the critical issues found during the SAST scan:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('sast-report.md').toString())
              \`\`\`
            `;
            const labels = ["sast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-and-sast
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start local Django server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Download and extract ZAP
        run: |
          export ZAP_HOME=$(mktemp -d)
          echo "ZAP_HOME=$ZAP_HOME" >> $GITHUB_ENV
          wget -qO "$ZAP_HOME/ZAP_2.16.0_Linux.tar.gz" https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz
          tar xzf "$ZAP_HOME/ZAP_2.16.0_Linux.tar.gz" -C "$ZAP_HOME" --strip-components=1
          if [ ! -f "$ZAP_HOME/zap.sh" ]; then
            echo "Error: Failed to extract ZAP."
            exit 1
          fi

      - name: Generate a random free port for ZAP
        run: |
          export ZAP_PORT=$(python3 -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
          echo "ZAP_PORT=$ZAP_PORT" >> $GITHUB_ENV

      - name: Set unique ZAP home directories
        run: |
          export DAEMON_ZAP_HOME=$(mktemp -d)
          echo "DAEMON_ZAP_HOME=$DAEMON_ZAP_HOME" >> $GITHUB_ENV
          export SCRIPT_ZAP_HOME=$(mktemp -d)
          echo "SCRIPT_ZAP_HOME=$SCRIPT_ZAP_HOME" >> $GITHUB_ENV

      - name: Start ZAP in background
        run: |
          "$ZAP_HOME/zap.sh" -daemon -port ${{ env.ZAP_PORT }} -host 0.0.0.0 -config api.disablekey=true -dir "$DAEMON_ZAP_HOME" &
          sleep 30

      - name: Create ZAP script for DAST
        run: |
          cat << 'EOF' > "$DAEMON_ZAP_HOME/zap-script.js"
          var targetUrl = "http://localhost:8000/";
          var scanPolicyName = "Default Policy";

          var client = new org.zaproxy.clientapi.core.ClientApi("localhost", ${{ env.ZAP_PORT }});

          try {
            var version = client.core.version();
            print("Connected to ZAP API version: " + version);
          } catch (e) {
            print("Error: Failed to connect to ZAP API.");
            exit(1);
          }

          var scanId = client.ascan.scan(targetUrl, null, null, null, null, scanPolicyName);

          while (true) {
            var status = client.ascan.status(scanId);
            print("Scan progress: " + status + "%");
            if (status >= 100) {
              break;
            }
            java.lang.Thread.sleep(5000);
          }

          var reportDir = "$SCRIPT_ZAP_HOME/zap-reports";
          client.reports.generate(targetUrl, "traditional-html", null, reportDir + "/zap-report.html", null, null, null, null, null);
          client.reports.generate(targetUrl, "json", null, reportDir + "/zap-report.json", null, null, null, null, null);
          EOF

      - name: Run ZAP script
        run: |
          "$ZAP_HOME/zap.sh" -cmd -script "$DAEMON_ZAP_HOME/zap-script.js" -dir "$SCRIPT_ZAP_HOME" -port ${{ env.ZAP_PORT }}

      - name: Stop ZAP process
        run: |
          pkill -f "zap.sh" || true

      - name: Generate DAST Report in Markdown
        run: |
          mkdir -p "${{ env.SCRIPT_ZAP_HOME }}/zap-reports"
          echo "# DAST Scan Results" > dast-report.md
          echo "" >> dast-report.md
          echo "Below are the critical vulnerabilities found during the DAST scan:" >> dast-report.md
          echo "" >> dast-report.md
          jq -r '.sites[].alerts[] | "## Alert: \(.name)\n\n- Risk: \(.riskdesc)\n- Description: \(.desc)\n- URL: \(.url)\n- Solution: \(.solution)\n\n"' "${{ env.SCRIPT_ZAP_HOME }}/zap-reports/zap-report.json" >> dast-report.md

      - name: Upload DAST reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            ${{ env.SCRIPT_ZAP_HOME }}/zap-reports
            dast-report.md

      - name: Create DAST Issue with Markdown report
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "DAST Scan Results";
            const issueBody = `
              The DAST scan has been completed. Below are the results:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('dast-report.md').toString())
              \`\`\`
            `;
            const labels = ["dast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

      - name: Clean up ZAP directories
        run: |
          rm -rf "$ZAP_HOME"
          rm -rf "$DAEMON_ZAP_HOME"
          rm -rf "$SCRIPT_ZAP_HOME"
