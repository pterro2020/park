name: SAST and DAST Scan with Deployment for Django Project

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start local Django server in background
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Install Bandit for Python SAST
        run: |
          pip install bandit

      - name: Run Bandit (Python) for SAST
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Generate SAST Report in Markdown
        run: |
          echo "# SAST Scan Results (Critical Issues)" > sast-report.md
          echo "" >> sast-report.md
          echo "Below are the critical issues found during the SAST scan:" >> sast-report.md
          echo "" >> sast-report.md
          jq -r '.[] | "## Issue: \(.test_id) - \(.issue_text)\n\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Filename: \(.filename)\n- Line: \(.line_number)\n\n"' critical-bandit-report.json >> sast-report.md

      - name: Upload SAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            critical-bandit-report.json
            sast-report.md

      - name: Create SAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "SAST Scan Results (Critical Issues)";
            const issueBody = `
              Below are the critical issues found during the SAST scan:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('sast-report.md').toString())
              \`\`\`
            `;
            const labels = ["sast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-and-sast
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start local Django server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Download and extract ZAP
        run: |
          export ZAP_HOME=$(mktemp -d)
          echo "ZAP_HOME=$ZAP_HOME" >> $GITHUB_ENV
          wget -qO "$ZAP_HOME/ZAP_2.16.0_Linux.tar.gz" https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz
          tar xzf "$ZAP_HOME/ZAP_2.16.0_Linux.tar.gz" -C "$ZAP_HOME" --strip-components=1
          if [ ! -f "$ZAP_HOME/zap.sh" ]; then
            echo "Error: Failed to extract ZAP."
            exit 1
          fi

      - name: Kill any existing ZAP processes and free port
        run: |
          # Убиваем все процессы ZAP
          pkill -f "zap.sh" || true
          sleep 15

          # Проверяем и освобождаем порт ${{ env.ZAP_PORT }}
          if lsof -i :${{ env.ZAP_PORT }}; then
            echo "Port ${{ env.ZAP_PORT }} is still in use. Killing processes..."
            lsof -i :${{ env.ZAP_PORT }} | awk '{print $2}' | xargs kill -9 || true
            sleep 15  # Даем время освободить порт
          else
            echo "Port ${{ env.ZAP_PORT }} is free."
          fi

      - name: Reserve a random free port for ZAP with socket binding
        run: |
          # Генерируем случайный порт и резервируем его с помощью временного сокета
          export ZAP_PORT=
          for i in {1..5}; do
            # Создаем временный сокет для резервирования порта
            python3 -c 'import socket; s=socket.socket(); s.bind(("", 0)); port=s.getsockname()[1]; print(port); open("/tmp/zap_port_reserved", "w").write(str(port)); s.close()' > /tmp/zap_port.txt

            # Читаем зарезервированный порт из файла
            export ZAP_PORT=$(cat /tmp/zap_port.txt)
            echo "ZAP_PORT=$ZAP_PORT" >> $GITHUB_ENV

            # Проверяем, свободен ли порт
            if ! nc -zv localhost $ZAP_PORT &> /dev/null && ! ss -tuln | grep ":$ZAP_PORT"; then
              echo "Port $ZAP_PORT is reserved."
              break
            else
              echo "Port $ZAP_PORT is still in use. Retrying ($i/5)..."
              sleep 5
            fi
          done

          # Если порт не найден после 5 попыток, завершаем выполнение
          if [ -z "${{ env.ZAP_PORT }}" ]; then
            echo "Error: Unable to find a free port for ZAP after 5 attempts."
            exit 1
          fi

      - name: Generate a random API key for ZAP
        run: |
          export ZAP_API_KEY=$(openssl rand -hex 16)
          echo "ZAP_API_KEY=$ZAP_API_KEY" >> $GITHUB_ENV

      - name: Set unique ZAP home directories
        run: |
          export DAEMON_ZAP_HOME=$(mktemp -d)
          echo "DAEMON_ZAP_HOME=$DAEMON_ZAP_HOME" >> $GITHUB_ENV
          export SCRIPT_ZAP_HOME=$(mktemp -d)
          echo "SCRIPT_ZAP_HOME=$SCRIPT_ZAP_HOME" >> $GITHUB_ENV

      - name: Start ZAP in background with unique port and API key
        run: |
          "$ZAP_HOME/zap.sh" -daemon -port ${{ env.ZAP_PORT }} -host 0.0.0.0 -config api.key=${{ env.ZAP_API_KEY }} -config api.disablekey=false -dir "$DAEMON_ZAP_HOME" &
          sleep 60  # Даем время ZAP на инициализацию

      - name: Check if ZAP started successfully
        run: |
          # Проверяем, успешно ли стартовал ZAP
          if curl -s -o /dev/null -X GET "http://localhost:${{ env.ZAP_PORT }}/JSON/core/view/version" --header "X-ZAP-API-Key: ${{ env.ZAP_API_KEY }}"; then
            echo "ZAP started successfully on port ${{ env.ZAP_PORT }}"
          else
            echo "Error: ZAP failed to start on port ${{ env.ZAP_PORT }}"
            exit 1
          fi

      - name: Save ZAP API key to file
        run: |
          echo "${{ env.ZAP_API_KEY }}" > "$DAEMON_ZAP_HOME/api.key"

      - name: Create autorunzap.xml configuration file
        run: |
          mkdir -p "${{ env.SCRIPT_ZAP_HOME }}/zap-reports"
          cat << 'EOF' > "$DAEMON_ZAP_HOME/autorunzap.xml"
          <zap-automation>
            <target>http://localhost:8000/</target>
            <scan>
              <policy>Default Policy</policy>
              <active>true</active>
              <spider>true</spider>
              <report>
                <format>html</format>
                <filename>$SCRIPT_ZAP_HOME/zap-reports/zap-report.html</filename>
              </report>
              <report>
                <format>json</format>
                <filename>$SCRIPT_ZAP_HOME/zap-reports/zap-report.json</filename>
              </report>
            </scan>
          </zap-automation>
          EOF

      - name: Run DAST Scan using ZAP Command Line
        run: |
          API_KEY=$(cat "$DAEMON_ZAP_HOME/api.key")
          "$ZAP_HOME/zap.sh" -cmd -port ${{ env.ZAP_PORT }} -config api.key="$API_KEY" -autorun "$DAEMON_ZAP_HOME/autorunzap.xml"

      - name: Stop ZAP process
        run: |
          pkill -f "zap.sh" || true

      - name: Generate DAST Report in Markdown
        run: |
          echo "# DAST Scan Results" > dast-report.md
          echo "" >> dast-report.md
          echo "Below are the critical vulnerabilities found during the DAST scan:" >> dast-report.md
          echo "" >> dast-report.md
          jq -r '.sites[].alerts[] | select(.riskdesc == "High") | "## Alert: \(.name)\n\n- Risk: \(.riskdesc)\n- Description: \(.desc)\n- URL: \(.url)\n- Solution: \(.solution)\n\n"' "${{ env.SCRIPT_ZAP_HOME }}/zap-reports/zap-report.json" >> dast-report.md

      - name: Upload DAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            ${{ env.SCRIPT_ZAP_HOME }}/zap-reports
            dast-report.md

      - name: Create DAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "DAST Scan Results";
            const issueBody = `
              The DAST scan has been completed. Below are the results:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('dast-report.md').toString())
              \`\`\`
            `;
            const labels = ["dast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

      - name: Clean up ZAP directories
        if: always()
        run: |
          rm -rf "$ZAP_HOME"
          rm -rf "$DAEMON_ZAP_HOME"
          rm -rf "$SCRIPT_ZAP_HOME"
