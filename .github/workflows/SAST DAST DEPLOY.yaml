name: SAST and DAST Scan with Deployment for Django Project

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start local Django server in background
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Install Bandit for Python SAST
        run: |
          pip install bandit

      - name: Run Bandit (Python) for SAST
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Generate SAST Report in Markdown
        run: |
          echo "# SAST Scan Results (Critical Issues)" > sast-report.md
          echo "" >> sast-report.md
          echo "Below are the critical issues found during the SAST scan:" >> sast-report.md
          echo "" >> sast-report.md
          jq -r '.[] | "## Issue: \(.test_id) - \(.issue_text)\n\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Filename: \(.filename)\n- Line: \(.line_number)\n\n"' critical-bandit-report.json >> sast-report.md

      - name: Upload SAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            critical-bandit-report.json
            sast-report.md

      - name: Create SAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "SAST Scan Results (Critical Issues)";
            const issueBody = `
              Below are the critical issues found during the SAST scan:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('sast-report.md').toString())
              \`\`\`
            `;
            const labels = ["sast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-and-sast
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start local Django server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      - name: Generate a random API key for ZAP
        run: |
          export ZAP_API_KEY=$(openssl rand -hex 16)
          echo "ZAP_API_KEY=$ZAP_API_KEY" >> $GITHUB_ENV

      - name: Set unique ZAP home directories
        run: |
          export DAEMON_ZAP_HOME=$(mktemp -d)
          echo "DAEMON_ZAP_HOME=$DAEMON_ZAP_HOME" >> $GITHUB_ENV
          export SCRIPT_ZAP_HOME=$(mktemp -d)
          echo "SCRIPT_ZAP_HOME=$SCRIPT_ZAP_HOME" >> $GITHUB_ENV

      - name: Start ZAP in background with Docker
        run: |
          docker run --rm -d \
            -u zap \
            -p ${{ env.ZAP_PORT }}:8080 \
            -v "$DAEMON_ZAP_HOME":/home/zap/.ZAP_D/ \
            --name zap-daemon \
            ghcr.io/zaproxy/zaproxy:stable \
            zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.key=${{ env.ZAP_API_KEY }} -config api.disablekey=false

      - name: Wait for ZAP to start
        run: |
          sleep 30  # Даем время ZAP на инициализацию

      - name: Run DAST Scan using ZAP Command Line inside Docker
        run: |
          docker exec zap-daemon zap-cli --zap-port 8080 --api-key ${{ env.ZAP_API_KEY }} quick-scan --self-contained --spider --active-scan http://localhost:8000

      - name: Export ZAP reports from Docker container
        run: |
          mkdir -p "${{ env.SCRIPT_ZAP_HOME }}/zap-reports"
          docker exec zap-daemon zap-cli --zap-port 8080 --api-key ${{ env.ZAP_API_KEY }} report -o "${{ env.SCRIPT_ZAP_HOME }}/zap-reports/zap-report.html" -f html
          docker exec zap-daemon zap-cli --zap-port 8080 --api-key ${{ env.ZAP_API_KEY }} report -o "${{ env.SCRIPT_ZAP_HOME }}/zap-reports/zap-report.json" -f json

      - name: Stop ZAP container
        run: |
          docker stop zap-daemon || true

      - name: Generate DAST Report in Markdown
        run: |
          echo "# DAST Scan Results" > dast-report.md
          echo "" >> dast-report.md
          echo "Below are the critical vulnerabilities found during the DAST scan:" >> dast-report.md
          echo "" >> dast-report.md
          jq -r '.alerts[] | select(.risk == "High") | "## Alert: \(.name)\n\n- Risk: \(.risk)\n- Description: \(.desc)\n- URL: \(.url)\n- Solution: \(.solution)\n\n"' "${{ env.SCRIPT_ZAP_HOME }}/zap-reports/zap-report.json" >> dast-report.md

      - name: Upload DAST reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            ${{ env.SCRIPT_ZAP_HOME }}/zap-reports
            dast-report.md

      - name: Create DAST Issue with Markdown report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "DAST Scan Results";
            const issueBody = `
              The DAST scan has been completed. Below are the results:

              Full report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

              \`\`\`markdown
              $(fs.readFileSync('dast-report.md').toString())
              \`\`\`
            `;
            const labels = ["dast", "security"];
            const assignees = [context.payload.sender.login];

            const issue = {
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            };

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issue
            });

      - name: Clean up ZAP directories
        if: always()
        run: |
          rm -rf "$DAEMON_ZAP_HOME"
          rm -rf "$SCRIPT_ZAP_HOME"
