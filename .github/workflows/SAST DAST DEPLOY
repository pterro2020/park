name: SAST and DAST Scan with Deployment

on:
  push:
    branches:
      - main

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Extract critical issues from Bandit report
        run: |
          jq '[.results[] | select(.issue_severity == "HIGH")]' bandit-report.json > critical-bandit-report.json

      - name: Create SAST Issues
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "SAST Scan Results (Critical Issues)"
          content-filepath: ./critical-bandit-report.json
          labels: sast, security

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            bandit-report.json
            critical-bandit-report.json

  dast-scan:
    runs-on: ubuntu-latest
    needs: sast-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start local server
        run: |
          python -m flask run --host=0.0.0.0 --port=5000 &
          sleep 10

      - name: Set unique ZAP home directory
        run: |
          export ZAP_HOME=$(mktemp -d)
          echo "ZAP_HOME=$ZAP_HOME" >> $GITHUB_ENV

      - name: Download ZAP
        run: |
          mkdir -p "$ZAP_HOME/ZAP_2.16.0"
          wget -qO- https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz | tar xz -C "$ZAP_HOME/ZAP_2.16.0" --strip-components=1
          if [ ! -f "$ZAP_HOME/ZAP_2.16.0/zap.sh" ]; then
            echo "Error: ZAP download failed."
            exit 1
          fi

      - name: Create reports directory
        run: mkdir -p "$ZAP_HOME/zap-reports"

      - name: Start ZAP in background
        run: |
          "$ZAP_HOME/ZAP_2.16.0/zap.sh" -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true -dir "$ZAP_HOME" &
          sleep 30

      - name: Create ZAP script for DAST
        run: |
          cat << 'EOF' > "$ZAP_HOME/ZAP_2.16.0/zap-script.js"
          var targetUrl = "http://localhost:5000/";
          var scanPolicyName = "Default Policy";

          var client = new org.zaproxy.clientapi.core.ClientApi("localhost", 8080);

          try {
            var version = client.core.version();
            print("Connected to ZAP API version: " + version);
          } catch (e) {
            print("Error: Failed to connect to ZAP API.");
            exit(1);
          }

          var scanId = client.ascan.scan(targetUrl, null, null, null, null, scanPolicyName);

          while (true) {
            var status = client.ascan.status(scanId);
            print("Scan progress: " + status + "%");
            if (status >= 100) {
              break;
            }
            java.lang.Thread.sleep(5000);
          }

          var reportDir = "$ZAP_HOME/zap-reports";
          client.reports.generate(targetUrl, "traditional-html", null, reportDir + "/zap-report.html", null, null, null, null, null);
          client.reports.generate(targetUrl, "json", null, reportDir + "/zap-report.json", null, null, null, null, null);
          EOF

      - name: Kill any existing ZAP processes
        run: |
          # Убиваем все существующие процессы ZAP, чтобы избежать конфликта с использованием $ZAP_HOME
          pkill -f "zap.sh" || true

      - name: Run ZAP script
        run: |
          "$ZAP_HOME/ZAP_2.16.0/zap.sh" -cmd -script "$ZAP_HOME/ZAP_2.16.0/zap-script.js" -dir "$ZAP_HOME"

      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: ${{ env.ZAP_HOME }}/zap-reports

      - name: Create DAST Issues
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "DAST Scan Results"
          content-filepath: ${{ env.ZAP_HOME }}/zap-reports/zap-report.json
          labels: dast, security

      - name: Clean up ZAP directory
        run: rm -rf "$ZAP_HOME"

  deploy:
    runs-on: ubuntu-latest
    needs: dast-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Update remote server packages
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            sudo apt-get update &&
            sudo apt-get install -y python3 python3-pip python3-venv git
          "

      - name: Copy files to remote server
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/park/

      - name: Install dependencies on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd /var/www/park &&
            python3 -m venv venv &&
            source venv/bin/activate &&
            pip install --upgrade pip &&
            pip install -r requirements.txt
          "

      - name: Restart application on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            sudo systemctl restart park.service
          "
