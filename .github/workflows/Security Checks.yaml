name: Security Checks

on:
  push:
    branches:
      - main

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка Python и Node.js
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Установка зависимостей
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install bandit
      - name: Install Node.js tools
        run: |
          npm install -g eslint@latest eslint-html-reporter@latest stylelint@latest stylelint-config-standard htmlhint@latest hadolint

      # Проверка Dockerfile
      - name: Dockerfile Linting
        if: ${{ fileExists('Dockerfile') }}
        run: |
          docker run --rm -v $(pwd):/app hadolint/hadolint:latest hadolint Dockerfile > hadolint-report.txt || true

      # Проверка docker-compose.yml
      - name: Docker Compose Validation
        if: ${{ fileExists('docker-compose.yml') }}
        run: |
          docker-compose config > /dev/null || true
          echo "Docker Compose config is valid." > docker-compose-report.txt

      # Django Security Checks
      - name: Django Security Checks
        run: |
          python manage.py check --deploy 2>&1 | tee django-check.txt || true

      # SAST для Python (Bandit)
      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f html -o bandit-report.html || true

      # SAST для JavaScript (ESLint)
      - name: Run ESLint (JavaScript)
        run: |
          # Создаём конфиг для ESLint v9+
          echo '{
            "type": "module",
            "default": {
              "rules": {
                "no-console": "warn",
                "no-debugger": "error"
              }
            }
          }' > .eslintrc.json
          eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true
          eslint-html-reporter -i eslint-report.json -o eslint-report.html || true

      # SAST для CSS (Stylelint)
      - name: Run Stylelint (CSS)
        run: |
          # Создаём конфиг для Stylelint
          echo '{
            "extends": "stylelint-config-standard"
          }' > .stylelintrc.json
          stylelint "**/*.{css,scss}" --formatter json --output-file stylelint-report.json || true
          stylelint "**/*.{css,scss}" --formatter html --output-file stylelint-report.html || true

      # SAST для HTML (HTMLHint)
      - name: Run HTMLHint (HTML)
        run: |
          # Создаём конфиг для HTMLHint
          echo '{
            "tagname-lowercase": true,
            "attr-lowercase": true
          }' > .htmlhintrc
          htmlhint "**/*.html" --format json > htmlhint-report.json || true

      # Генерация объединённого отчёта
      - name: Generate Security Report
        run: |
          echo "# Security Checks Report" > security-report.md
          
          # Docker
          echo "## Dockerfile Linting" >> security-report.md
          cat hadolint-report.txt >> security-report.md || echo "No Dockerfile found." >> security-report.md
          echo "## Docker Compose" >> security-report.md
          cat docker-compose-report.txt >> security-report.md || echo "No docker-compose.yml found." >> security-report.md
          
          # Django
          echo "## Django Warnings" >> security-report.md
          cat django-check.txt >> security-report.md || echo "No Django issues found." >> security-report.md
          
          # Python (Bandit)
          echo "## Python (Bandit)" >> security-report.md
          if [ -f bandit-report.json ]; then
            jq -r '.results[] | "### \(.test_id)\n- Severity: \(.issue_severity)\n- Line: \(.line_number)\n- File: \(.filename)\n- Issue: \(.issue_text)\n"' bandit-report.json >> security-report.md || true
          else
            echo "No Python issues found." >> security-report.md
          fi
          
          # JavaScript (ESLint)
          echo "## JavaScript (ESLint)" >> security-report.md
          if [ -f eslint-report.json ]; then
            jq -r '.[] | "### \(.ruleId)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.filePath)\n- Message: \(.message)\n"' eslint-report.json >> security-report.md || true
          else
            echo "No JavaScript issues found." >> security-report.md
          fi
          
          # CSS (Stylelint)
          echo "## CSS (Stylelint)" >> security-report.md
          if [ -f stylelint-report.json ]; then
            jq -r '.[] | "### \(.rule)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.source)\n- Message: \(.text)\n"' stylelint-report.json >> security-report.md || true
          else
            echo "No CSS issues found." >> security-report.md
          fi
          
          # HTML (HTMLHint)
          echo "## HTML (HTMLHint)" >> security-report.md
          if [ -f htmlhint-report.json ]; then
            jq -r '.[] | "### \(.rule.id)\n- Severity: \(.rule.severity)\n- Line: \(.line)\n- File: \(.file)\n- Message: \(.message)\n"' htmlhint-report.json >> security-report.md || true
          else
            echo "No HTML issues found." >> security-report.md
          fi

      # Публикация отчётов
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.html
            eslint-report.json
            eslint-report.html
            stylelint-report.json
            stylelint-report.html
            htmlhint-report.json
            django-check.txt
            hadolint-report.txt
            docker-compose-report.txt
            security-report.md

      # Создание GitHub Issue с ограниченным размером
      - name: Create Security Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issueTitle = "Security Checks Results";
            
            // Ограничиваем длину отчёта до 65 000 символов
            const body = fs.readFileSync('security-report.md').toString().slice(0, 65000);
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: `## Report\n${body}\n\nFull reports: [Download](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts)`,
              labels: ["security"],
              assignees: [context.actor]
            });
