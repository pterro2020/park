name: SAST

on:
  push:
    branches:
      - main

jobs:
  build-and-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Устанавливаем SAST-инструменты для Python
          pip install bandit
          # Устанавливаем ESLint, Stylelint, HTMLHint для JS/CSS/HTML
          npm install -g eslint@latest stylelint@latest htmlhint@latest eslint-html-reporter@latest

      # Создаём конфиги для SAST-инструментов
      - name: Configure SAST tools
        run: |
          # ESLint (v9+)
          echo 'export default [
            {
              rules: {
                "no-console": "warn",
                "no-debugger": "error"
              }
            }
          ];' > eslint.config.js

          # Stylelint
          echo '{
            "extends": "stylelint-config-standard"
          }' > .stylelintrc.json

          # HTMLHint
          echo '{
            "tagname-lowercase": true,
            "attr-lowercase": true
          }' > .htmlhintrc

      - name: Check Django migrations
        run: |
          python manage.py check --deploy
          python manage.py makemigrations --dry-run --check

      - name: Start Django server
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10

      # SAST для Python (Bandit)
      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          # Генерация HTML-отчёта через Bandit
          bandit -r . -f html -o bandit-report.html || true

      # SAST для JavaScript (ESLint)
      - name: Run ESLint (JavaScript)
        run: |
          eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true
          # Генерация HTML-отчёта
          eslint . --ext .js,.jsx --format html --output-file eslint-report.html || true

      # SAST для CSS (Stylelint)
      - name: Run Stylelint (CSS)
        run: |
          stylelint "**/*.{css,scss}" --formatter json > stylelint-report.json || true
          stylelint "**/*.{css,scss}" --formatter html > stylelint-report.html || true

      # SAST для HTML (HTMLHint)
      - name: Run HTMLHint (HTML)
        run: |
          htmlhint "**/*.html" --format json > htmlhint-report.json || true
          htmlhint "**/*.html" --format html > htmlhint-report.html || true

      # Генерация объединённого отчёта
      - name: Generate Combined SAST Report
        run: |
          echo "# SAST Scan Results" > sast-report.md
          # Python (Bandit)
          echo "## Python (Bandit)" >> sast-report.md
          if [ -f bandit-report.json ]; then
            jq -r '.results[] | "### \(.test_id)\n- Severity: \(.issue_severity)\n- Line: \(.line_number)\n- File: \(.filename)\n- Issue: \(.issue_text)\n"' bandit-report.json >> sast-report.md || true
          else
            echo "No Python issues found." >> sast-report.md
          fi
          # JavaScript (ESLint)
          echo "## JavaScript (ESLint)" >> sast-report.md
          if [ -f eslint-report.json ]; then
            jq -r '.[] | "### \(.ruleId)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.filePath)\n- Message: \(.message)\n"' eslint-report.json >> sast-report.md || true
          else
            echo "No JavaScript issues found." >> sast-report.md
          fi
          # CSS (Stylelint)
          echo "## CSS (Stylelint)" >> sast-report.md
          if [ -f stylelint-report.json ]; then
            jq -r '.[] | "### \(.rule)\n- Severity: \(.severity)\n- Line: \(.line)\n- File: \(.source)\n- Message: \(.text)\n"' stylelint-report.json >> sast-report.md || true
          else
            echo "No CSS issues found." >> sast-report.md
          fi
          # HTML (HTMLHint)
          echo "## HTML (HTMLHint)" >> sast-report.md
          if [ -f htmlhint-report.json ]; then
            jq -r '.[] | "### \(.rule.id)\n- Severity: \(.rule.severity)\n- Line: \(.line)\n- File: \(.file)\n- Message: \(.message)\n"' htmlhint-report.json >> sast-report.md || true
          else
            echo "No HTML issues found." >> sast-report.md
          fi

      # Публикация отчётов
      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-report.html
            eslint-report.json
            eslint-report.html
            stylelint-report.json
            stylelint-report.html
            htmlhint-report.json
            htmlhint-report.html
            sast-report.md

      # Создание GitHub Issue
      - name: Create SAST Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issueTitle = "Security Scan Results";
            const issueBody = `
              ## SAST Report
              Full reports: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
              ### Python (Bandit)
              \`\`\`markdown
              ${fs.readFileSync('sast-report.md').toString().split('## JavaScript')[0] || 'No issues found'}
              \`\`\`
              ### JavaScript (ESLint)
              \`\`\`markdown
              ${fs.readFileSync('sast-report.md').toString().match(/## JavaScript.*?(?=## CSS)/s)[0] || 'No issues found'}
              \`\`\`
              ### CSS (Stylelint)
              \`\`\`markdown
              ${fs.readFileSync('sast-report.md').toString().match(/## CSS.*?(?=## HTML)/s)[0] || 'No issues found'}
              \`\`\`
              ### HTML (HTMLHint)
              \`\`\`markdown
              ${fs.readFileSync('sast-report.md').toString().match(/## HTML.*$/s)[0] || 'No issues found'}
              \`\`\`
            `;
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ["security", "sast"],
              assignees: [context.actor]
            });
