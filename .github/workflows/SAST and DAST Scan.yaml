name: SAST and DAST Scan

on:
  push:
    branches:
      - main

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получаем всю историю, чтобы SAST мог анализировать все файлы

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # Устанавливаем нужную версию Python

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit  # Устанавливаем Bandit для SAST

      - name: Run Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true  # Запускаем SAST и сохраняем отчет в JSON формате, игнорируем ошибки

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json  # Загружаем отчет SAST как артефакт

  dast-scan:
    runs-on: ubuntu-latest
    needs: sast-scan  # DAST будет выполнен после завершения SAST
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq  # Устанавливаем jq для работы с JSON

      - name: Download ZAP
        run: |
          mkdir -p ZAP_2.16.0
          wget -qO- https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz | tar xz -C ZAP_2.16.0 --strip-components=1

          # Проверяем, что ZAP скачан
          if [ ! -f "./ZAP_2.16.0/zap.sh" ]; then
            echo "Error: ZAP download failed."
            exit 1
          fi

      - name: Create reports directory
        run: |
          mkdir -p zap-reports  # Создаем директорию для отчетов ZAP

      - name: Start ZAP in background
        run: |
          # Запускаем ZAP в фоновом режиме
          ./ZAP_2.16.0/zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true &
          sleep 10  # Ждем, пока ZAP запустится

      - name: Create ZAP script for DAST
        run: |
          # Создаем файл zap-script.js для DAST сканирования
          cat << 'EOF' > ./ZAP_2.16.0/zap-script.js 
          # Скрипт для ZAP
          var targetUrl = "http://89.169.164.174/myparking/"; // URL вашего приложения
          var scanPolicyName = "Default Policy"; // Используемая политика сканирования

          # Инициализация ZAP
          print("Initializing ZAP...");
          var client = new org.zaproxy.clientapi.core.ClientApi("localhost", 8080);

          # Проверка доступности ZAP API
          try {
          var version = client.core.version();
          print("Connected to ZAP API version: " + version);
          } catch (e) {
          print("Error: Failed to connect to ZAP API. Make sure ZAP is running and the API is accessible.");
          exit(1);
          }

          # Запуск сканирования
          print("Starting active scan for: " + targetUrl);
          var scanId = client.ascan.scan(targetUrl, null, null, null, null, scanPolicyName);

          # Ожидание завершения сканирования
          print("Waiting for scan to complete...");
          while (true) {
          var status = client.ascan.status(scanId);
          print ("Scan progress: " + status + "%");
          if (status >= 100) {
          break;
          }
          java.lang.Thread.sleep(5000); // Пауза 5 секунд
          }

          # Генерация отчетов
          print("Generating reports...");
          var reportDir = "./

