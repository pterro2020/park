name: SAST and DAST Scan

on:
  push:
    branches:
      - main

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получаем всю историю, чтобы SAST мог анализировать все файлы

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # Устанавливаем нужную версию Python

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit  # Устанавливаем Bandit для SAST

      - name: Run Bandit (Python)
        run: |
          bandit -r . -f json -o bandit-report.json || true  # Запускаем SAST для Python и сохраняем отчет в JSON формате, игнорируем ошибки

      - name: Install HTMLHint
        run: |
          npm install -g htmlhint  # Устанавливаем HTMLHint для проверки HTML

      - name: Run HTMLHint
        run: |
          htmlhint **/*.html || true  # Запускаем проверку HTML, игнорируем ошибки

      - name: Install ESLint
        run: |
          npm install -g eslint  # Устанавливаем ESLint для проверки JavaScript

      - name: Run ESLint
        run: |
          eslint . || true  # Запускаем проверку JavaScript, игнорируем ошибки

      - name: Install Stylelint
        run: |
          npm install -g stylelint  # Устанавливаем Stylelint для проверки CSS

      - name: Run Stylelint
        run: |
          stylelint "**/*.css" || true  # Запускаем проверку CSS, игнорируем ошибки

      - name: Install PSScriptAnalyzer
        run: |
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser "  # Устанавливаем PSScriptAnalyzer для проверки PowerShell

      - name: Run PSScriptAnalyzer
        run: |
          pwsh -Command "Invoke-ScriptAnalyzer -Path . -Recurse -OutputFormat JSON | Out-File -FilePath psreport.json" || true  # Запускаем проверку PowerShell, игнорируем ошибки

      - name: List files in current directory
        run: |
          ls -la  # Выводим список файлов в текущей директории для отладки

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            bandit-report.json  # Загружаем отчет SAST для Python
            psreport.json  # Загружаем отчет для PowerShell
  dast-scan:
    runs-on: ubuntu-latest
    needs: sast-scan  # DAST будет выполнен после завершения SAST
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq  # Устанавливаем jq для работы с JSON

      - name: Download ZAP
        run: |
          mkdir -p ZAP_2.16.0
          wget -qO- https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz | tar xz -C ZAP_2.16.0 --strip-components=1

          # Проверяем, что ZAP скачан
          if [ ! -f "./ZAP_2.16.0/zap.sh" ]; then
            echo "Error: ZAP download failed."
            exit 1
          fi

      - name: Create reports directory
        run: |
          mkdir -p zap-reports  # Создаем директорию для отчетов ZAP

      - name: Start ZAP in background
        run: |
          # Запускаем ZAP в фоновом режиме
          ./ZAP_2.16.0/zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true &
          sleep 10  # Ждем, пока ZAP запустится

      - name: Create ZAP script for DAST
        run: |
          # Создаем файл zap-script.js для DAST сканирования
          cat << 'EOF'
