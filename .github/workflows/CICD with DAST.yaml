name: DAST OWASP ZAP

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dast-scan:
    runs-on: ubuntu-latest

    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Проверка структуры проекта
      - name: Show directory structure
        run: |
          ls -la

      # Установка Python и зависимостей Django
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Сборка статических файлов
      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      # Применение миграций
      - name: Apply migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      # Запуск Django-сервера
      - name: Start Django application
        run: |
          nohup python manage.py runserver 0.0.0.0:8000 > django.log 2>&1 &
          echo "Waiting for Django application to start..."
          sleep 15
          echo "Django application started on http://localhost:8000"

      # Проверка доступности сервера
      - name: Check if Django server is running
        run: |
          timeout=180  # Увеличиваем таймаут до 180 секунд
          while [ $timeout -gt 0 ]; do
            curl -s http://localhost:8000 | grep -q '<!DOCTYPE html>' && break
            echo "Waiting for Django server to become available... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout - 5))
          done
          if [ $timeout -le 0 ]; then
            echo "Django server failed to start within the timeout period."
            exit 1
          fi
          echo "Django server is running."

      # Показать логи Django (в случае ошибки)
      - name: Show Django logs
        if: failure()
        run: |
          cat django.log

      # Запуск сканирования OWASP ZAP через Docker
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable:latest \
            zap-baseline.py \
            -t http://localhost:8000 \
            -r zap_report.html \
            -g zap_config.zap \
            -l WARN \
            -x zap.xml

      # Преобразование HTML-отчета в Markdown
      - name: Convert HTML report to Markdown
        run: |
          pandoc -f html -t markdown zap_report.html -o zap_report.md
          cat zap_report.md

      # Публикация отчета
      - name: Upload ZAP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.md
