name: DAST OWASP ZAP

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dast-scan:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Проверка структуры проекта
      - name: Show directory structure
        run: |
          ls -la

      # Шаг 3: Установка Python и зависимостей Django
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Шаг 4: Запуск Django-приложения в фоновом режиме
      - name: Start Django application
        run: |
          python manage.py migrate
          nohup python manage.py runserver 0.0.0.0:8000 > django.log 2>&1 &
          echo "Django application started on http://localhost:8000"

      # Шаг 5: Запуск сканирования OWASP ZAP через Docker
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zap2docker-stable:latest \
            zap-baseline.py \
            -t http://localhost:8000 \
            -r zap_report.html \
            -g zap_config.zap \
            -l WARN \
            -x zap.xml

      # Шаг 6: Преобразование HTML-отчета в Markdown
      - name: Convert HTML report to Markdown
        run: |
          pandoc -f html -t markdown zap_report.html -o zap_report.md
          cat zap_report.md

      # Шаг 7: Публикация отчета
      - name: Upload ZAP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.md
