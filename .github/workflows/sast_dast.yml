stages:
  - sast
  - dast

variables:
  # Настройки для OWASP ZAP
  ZAP_TARGET: "http://89.169.164.174:80"  # Укажите URL вашего приложения
  ZAP_OPTIONS: "-a"  # Автоматическое подтверждение предупреждений

# SAST с использованием Semgrep
sast:
  stage: sast
  image: python:3.9  # Используем стабильную версию Python
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'  # Запускать при пуше в репозиторий
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # Запускать при создании MR
  script:
    - pip install semgrep  # Устанавливаем Semgrep
    - semgrep --config=p/ci --json -o semgrep-sast-report.json  # Запуск Semgrep и сохранение отчета
  artifacts:
    paths:
      - semgrep-sast-report.json  # Сохраняем отчет как артефакт
    expire_in: 1 week  # Время хранения артефактов

# DAST с использованием OWASP ZAP
dast:
  stage: dast
  image: owasp/zap2docker-stable  # Используем официальный образ OWASP ZAP
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'  # Запускать при пуше в репозиторий
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # Запускать при создании MR
  script:
    - zap-baseline.py -t $ZAP_TARGET $ZAP_OPTIONS -r zap-report.html -w zap-report.md  # Запуск ZAP и сохранение отчетов
  artifacts:
    paths:
      - zap-report.html  # HTML-отчет
      - zap-report.md    # Markdown-отчет
    expire_in: 1 week  # Время хранения артефактов
