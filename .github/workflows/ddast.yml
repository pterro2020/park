name: DAST Scan
on:
  push:
    branches:
      - main
jobs:
  dast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Download ZAP
        run: |
          mkdir -p ZAP_2.16.0
          wget -qO- https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz | tar xz -C ZAP_2.16.0 --strip-components=1

          # Проверка, что ZAP скачан
          if [ ! -f "./ZAP_2.16.0/zap.sh" ]; then
            echo "Error: ZAP download failed."
            exit 1
          fi

      - name: Create reports directory
        run: |
          mkdir -p /home/actions-runner/_work/park/park/zap-reports
          chmod 777 /home/actions-runner/_work/park/park/zap-reports

          # Проверка, что директория создана
          if [ ! -d "/home/actions-runner/_work/park/park/zap-reports" ]; then
            echo "Error: Failed to create reports directory."
            exit 1
          fi

      - name: Stop ZAP if running
        run: |
          # Останавливаем ZAP, если он уже запущен
          pkill -f "zap.sh" || echo "ZAP is not running."

      - name: Start ZAP in background
        run: |
          # Используем порт 8080, если он занят, пробуем 8090, затем 8091 и так далее
          for PORT in 8080 8090 8091 8092 8093; do
            if ! lsof -i :$PORT; then
              echo "Starting ZAP on port $PORT"
              ./ZAP_2.16.0/zap.sh -daemon -port $PORT -host 0.0.0.0 -config api.disablekey=true &
              sleep 10 # Даем ZAP время на запуск
              break
            else
              echo "Port $PORT is in use."
            fi
          done

      - name: Check if zap-script.js exists
        run: |
          if [ ! -f "./ZAP/zap-script.js" ]; then
            echo "Error: zap-script.js not found in the ZAP directory."
            exit 1
          fi

      - name: Run DAST scan
        run: |
          # Запуск ZAP с правильными параметрами
          # Укажите URL вашего проекта
          PROJECT_URL="http://89.169.164.174/myparking/"
          ./ZAP_2.16.0/zap.sh -cmd -autorun ./ZAP/zap-script.js -url $PROJECT_URL -dir /home/actions-runner/_work/park/park/zap-reports || { echo "DAST scan failed"; exit 1; }

          # Проверка, что отчеты созданы
          if [ ! -f "/home/actions-runner/_work/park/park/zap-reports/zap-report.html" ] || [ ! -f "/home/actions-runner/_work/park/park/zap-reports/zap-report.md" ]; then
            echo "Error: DAST scan reports not found."
            exit 1
          fi

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: /home/actions-runner/_work/park/park/zap-reports

      - name: Get artifact download URL
        id: artifact
        run: |
          # Получаем URL артефакта
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/pterro2020/park/actions/artifacts \
            | jq -r '.artifacts[] | select(.name == "zap-reports") | .archive_download_url')

          # Проверка, что URL получен
          if [ -z "$ARTIFACT_URL" ]; then
            echo "Error: ARTIFACT_URL is empty or not found."
            exit 1
          fi

          # Записываем URL в переменную окружения
          echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_ENV

      - name: Debug artifact URL
        run: |
          # Проверка, что переменная artifact_url установлена
          if [ -z "${{ env.artifact_url }}" ]; then
            echo "Error: artifact_url is empty."
            exit 1
          fi

          echo "artifact_url=${{ env.artifact_url }}"

      - name: Create GitHub Issue with ZAP report links
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Проверка, что переменная artifact_url доступна
          if [ -z "${{ env.artifact_url }}" ]; then
            echo "Error: artifact_url is not set."
            exit 1
          fi

          # Формируем тело Issue с ссылками на артефакты
          ISSUE_BODY="### ZAP Security Scan Report\n\n*HTML Report: [Download](${ { env.artifact_url }})\n\n*Markdown Report: [Download](${ { env.artifact_url }})"

          # Создаем Issue через GitHub API
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/pterro2020/park/issues \
            -d '{
              "title": "ZAP Security Scan Report",
              "body": "'"$ISSUE_BODY"'",
              "labels": ["security", "zap"]
            }'

          # Проверка, что Issue создан
          if [ $? -ne 0 ]; then
            echo "Error: Failed to create GitHub Issue."
            exit 1
          fi
